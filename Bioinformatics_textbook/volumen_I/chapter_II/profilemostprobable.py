"""
Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e., a k-mer that was
most likely to have been generated by Profile among all k-mers in Text. For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. Indeed,
every other 12-mer in this string has probability 0. In general, if there are multiple Profile-most probable k-mers in Text, then we select the first such k-mer
occurring in Text.
 
Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.
Input: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Output: A Profile-most probable k-mer in Text.
"""
import numpy as np

'''
with open('rosalind_ba2c.txt') as file:
	i= 0
	matrix_2 = []

	for line in file.read().splitlines():
		if i == 0:
			pattern = line.strip()
		elif i == 1:
			k = int(line)
		else:
			matrix_2.append(line)
		i += 1

file.close()

matrix = []

for i in range(4):
	matrix.append(matrix_2[i].split())

'''


nucleotides = {
	'A': 0,
	'C': 1,
	'G': 2,
	'T': 3
}



def probability(kmer, d):
	proba = 1
	for i in range(len(kmer)):
		proba *= float(d[nucleotides[kmer[i]]][i])
	return proba

def profilemost(pattern, k, matrix):
	mostprob = pattern[:k]
	kmer_maximus = 0
	kmer_most_probable = pattern[:k]

	matrix = np.array(matrix)

	for i in range(len(pattern)-k+1):
		kmer = pattern[i:i+k]
		kmer_probability = probability(kmer, matrix)

		if kmer_maximus < kmer_probability:

			kmer_maximus = kmer_probability
			kmer_most_probable = kmer


	return kmer_most_probable


'''
a = profilemost(pattern, k, matrix)
print(a)
'''


